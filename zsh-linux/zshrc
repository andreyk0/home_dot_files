# .zshrc is sourced in interactive shells. It should contain commands to set
# up aliases, functions, options, key bindings, etc.

fpath=(/usr/local/share/zsh-completions $fpath)
fpath=(~/.zsh/completion $fpath)

autoload -Uz compinit && compinit -i

setopt completeinword

zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'
zstyle ':completion:complete-file::::' completer _files matcher-list 'm:{a-zA-Z}={A-Za-z}'

zle -C complete-file complete-word _generic
bindkey '^x^I' complete-file

autoload select-word-style
select-word-style shell
setopt auto_cd

setopt interactivecomments # pound sign in interactive prompt

setopt no_auto_remove_slash # keep slashes

# superglobs
setopt extendedglob
unsetopt caseglob
unsetopt nomatch

HISTFILE=~/.zhistory
HISTSIZE=SAVEHIST=10000

# Prefer inc_append_history of share_history for consistent per-window behavior
unsetopt share_history     # Don't share history real-time between instances.
setopt inc_append_history  # Each instance has its own history at run time, but global history file (for future invocations) is appended in real-time
# Some history settings missing from lib/history.zsh
setopt hist_ignore_space   # Ignore dups
setopt hist_find_no_dups   # Don't cycle through dupes during history search
setopt hist_no_store       # Don't save invocation of history itself
setopt hist_no_functions   # Don't save ZSH function definitions
setopt histignorealldups # Substitute commands in the prompt
setopt promptsubst # required for git plugin


REPORTTIME=10


#
# Shell mode
#

# Use vi mode
bindkey -v
export KEYTIMEOUT=1

# https://blog.xargs.io/2012/05/21/using-zshs-history-incremental-search-with-vi-mode/
bindkey -M viins '^R' history-incremental-search-backward
bindkey -M vicmd '^R' history-incremental-search-backward

# Slow to start
#if type kubectl > /dev/null ; then
#  source <(kubectl completion zsh)
#fi

# trm complete files
compdef _files trash-put

if type zoxide > /dev/null ; then
  source <(zoxide init zsh)
fi

if type zellij > /dev/null ; then
  source <(zellij setup --generate-completion=zsh) 2>/dev/null
fi

function set_win_title(){
    echo -ne "\033]0; $(basename "$PWD") \007"
}
precmd_functions+=(set_win_title)

o() {
    "$@" 2>&1 | tee /tmp/out.$$
    echo "bat /tmp/out.$$"
}

# 1Pass
op-signin() { eval $(op signin $1) }

# Java UI scaling
JavaUIScale() {
  export _JAVA_OPTIONS="${_JAVA_OPTIONS} -Dsun.java2d.ddscale=true -Dsun.java2d.uiScale=2"
}

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then

  export CLICOLOR=1
  export LSCOLORS=dxfxcxdxbxegedabagacad

  test -r ~/.dircolors && eval "$(/usr/bin/dircolors -b ~/.dircolors)" || eval "$(/usr/bin/dircolors -b)"
fi

if type exa > /dev/null ; then
  alias ls='exa -g'
  alias ll='exa -g -l --git'
  alias la='exa -g -a'
  alias tree='exa --git-ignore -T'
fi

if type bat > /dev/null ; then
  alias cat='bat -p'
  alias wbat='bat --wrap=never'
fi
#alias top='btm'
#alias du='dust'
#alias ps='procs'

alias g=git
alias gs='git status'

alias trm='trash-put'
alias open='xdg-open'

alias zp='z $(project-root)'

alias julia='julia -p auto'

alias rga='rg --no-ignore -.'
alias fda='fd -uH'

alias j=just
alias jc='just --choose'

alias hx=helix

alias Z='zellij action rename-tab $(basename $(pwd))'

# Launch GPG agent
#gpgconf --launch gpg-agent

# GPG/SSH env
if [ -z "$SSH_CLIENT" ]; then
  GPG_TTY=$(/usr/bin/tty)
  SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
  export GPG_TTY SSH_AUTH_SOCK
fi

if [ "$TERM" != "dumb" ] && type starship > /dev/null ; then
	eval "$(starship init zsh)"
fi
